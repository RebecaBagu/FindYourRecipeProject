@page "/"
@inject IJSRuntime JSRuntime
@inject IIngredientService Ingredients
@inject IRecipeService Recipes
<PageTitle>Home</PageTitle>

<div class="container p-5 " style=" text-align:center ;background-color: rgb(225, 215, 198); margin-top: 15px;">
    <h1 style="font-size: 50px;">Find Your Recipe</h1>

    <style>
        .select2-selection {
            height: 80px;
            font-size: 25px;
        }

        .select2-container--default .select2-selection--multiple .select2-selection__choice__display {
            padding-left: 10px;
        }

        .select2-container .select2-search--inline textarea.select2-search__field {
            height: 40px;
            text-align: center;
            margin-top: 17px;
        }
    </style>
</div>
<div class="container" style="margin-top: 120px;">
    <div class="row">
        <div class="col-sm-2"></div>
        <div class="col-sm-8">
            <h1 style="font-size: 20px;margin-bottom: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;Choose the ingredients you want to use in the recipe: </h1>
            <select id="SearchBar" class="form-control" multiple="multiple">
                @foreach (var ingredient in IngredientList)
                {
                    <option value="@ingredient.Id">@ingredient.Name</option>
                }
            </select>
        </div>
        <div class="col-sm-2"></div>
    </div>
</div>

<div>

</div>
<div class="container" style="margin-top: 30px;">
    <div class="row">
        <div class="col-sm-5"></div>
        <div class="col-sm-2  d-grid">
            <button type="button" class="btn btn-outline-dark" @onclick="SearchClick">Search</button>
        </div>
        <div class="col-sm-5"></div>
    </div>
</div>

@code
{
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("InitializeSearchBar");
        }
    }

    public async Task<List<int>> GetSelectedIngredientIds()
    {
        return await JSRuntime.InvokeAsync<List<int>>("GetSearchBarValues");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        IngredientList.AddRange(await Ingredients.GetAsync());
    }

    private async Task SearchClick(MouseEventArgs arg)
    {
        var selectedIngredients = await GetSelectedIngredientIds();
        var recipes = await Recipes.GetByIngredientsAsync(selectedIngredients);
        foreach (var opt in recipes)
            Console.WriteLine(opt.Id  + " " + opt.Title);
    }

    List<IngredientResponseModel> IngredientList = new List<IngredientResponseModel>();
}

