@page "/login"

@inject IUserService UserService
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavManager


<div class="container" style="margin-top:350px">
    <div class="row">
        <div class="col-sm-2"></div>
        <div class="col-sm-8">
            <div class="row">
                <div class="col-sm-4"><img class="img-fluid" src=https://images.fineartamerica.com/images/artworkimages/mediumlarge/3/italiam-cuisine-pasta-food-art-watercolors-ginette-callaway.jpg /></div>
                <div class="col-sm-8 " style="background-color: rgb(225, 215, 198)">
                    <h2 style="text-align:center ;margin-top:15px">Login</h2>
                    <EditForm Model="@requestModel" OnSubmit="HandleSubmitAsync" style="margin-top:30px">
                        <div class="mb-3">
                            <label class="form-label">Username</label>
                            <input type="username" name="" required="" class="form-control" @bind-value="requestModel.Username">
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <input type="password" name="" required="" class="form-control" @bind-value="requestModel.Password">
                        </div>
                        <div class="mb-3">
                            @if (exceptionMessage!=null)
                            {
                                <p>@exceptionMessage</p>
                            }

                        </div>
                        <button type="submit" class="btn btn-primary">Submit</button>
                        <div class="mb-3" style="margin-top:5px">
                            <a href="/register">Click here to register</a>
                        </div>
                    </EditForm>
                </div>
            </div>

        </div>
        <div class="col-sm-2"></div>
    </div>
</div>

@code {

    private LoginRequestModel requestModel = new();
    string exceptionMessage;
    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthState.GetAuthenticationStateAsync();

        if (authState.User.Identity is not null && authState.User.Identity.IsAuthenticated)
        {
            // Redirect to home if user is already authenticated
            NavManager.NavigateTo("/");
        }
    }

    public async Task HandleSubmitAsync()
    {
        try
        {
            var response = await UserService.LoginAsync(requestModel);

            await LocalStorage.SetItemAsync("user", response);

            await AuthState.GetAuthenticationStateAsync();

            // Redirect to home after user is authenticated
            NavManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
        }


    }
}

