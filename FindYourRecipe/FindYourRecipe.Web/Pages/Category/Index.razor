@page "/categories"

@attribute [Authorize(Roles = "Admin")]
@inject ICategoryService CategoryService
@inject IJSRuntime JsRuntime

<PageTitle>Categories</PageTitle>

<div class="container" style="margin-top:15px; margin-bottom:15px">
    <div class=" btn-group">
        <a href="/categories/create" class="btn" style="background-color: rgb(225, 215, 198)" role="button">
            Create Category
        </a>
    </div>
</div>
<div class="container mt-3">
    <h2>Categories</h2>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th></th>
                <th></th>
            </tr>
            @foreach (var category in categoriesList)
            {
                <tr>
                    <td>@category.Id</td>
                    <td>@category.Name</td>

                    <td>
                        <button type="button" class="btn btn-danger" @onclick="async () => { await DeleteCategoryClick(category.Id); }">Delete</button>
                    </td>
                    <td>
                        <div class=" btn-group">
                            <a href="/categories/@category.Id" class="btn btn-success" role="button">Update</a>
                        </div>
                    </td>
                </tr>
            }
        </thead>
        <tbody>
        </tbody>
    </table>
</div>
@code {
    List<CategoryResponseModel> categoriesList = new List<CategoryResponseModel>();

    protected override async Task OnInitializedAsync()
    {
        categoriesList = await CategoryService.GetAsync();
    }

    public async Task DeleteCategoryClick(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await CategoryService.DeleteAsync(id);

            categoriesList = await CategoryService.GetAsync();

            this.StateHasChanged();
        }

    }
}

