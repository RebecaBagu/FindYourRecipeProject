@page "/register"

@inject IUserService UserService
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavManager


<div class="container" style="margin-top:250px">
    <div class="row">
        <div class="col-sm-2"></div>
        <div class="col-sm-8">
            <div class="row">
                <div class="col-sm-4">
                <img class="img" style="max-height: 600px;" src=https://images.fineartamerica.com/images/artworkimages/mediumlarge/3/italiam-cuisine-pasta-food-art-watercolors-ginette-callaway.jpg />
                </div>
                <div class="col-sm-8 " style="background-color: rgb(225, 215, 198)">
                    <h2 style="text-align:center ;margin-top:15px">Register</h2>
                    <EditForm Model="@requestModel" OnSubmit="HandleSubmitAsync" style="margin-top:30px">
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <input type="text" name="name" required="" class="form-control" @bind-value="requestModel.Name">
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Username</label>
                            <input type="text" name="username" required="" class="form-control" @bind-value="requestModel.Username">
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <input type="email" name="email" required="" class="form-control" @bind-value="requestModel.Email">
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <input type="password" name="password" required="" class="form-control" @bind-value="requestModel.Password">
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Confirm Password</label>
                            <input type="password" name="confirmPassword" required="" class="form-control" @bind-value="verificationPassword">
                        </div>


                        <div class="mb-3">
                            @if (isPasswordWrong)
                            {
                                <p>Your password and confirmation password do not match</p>
                            }

                        </div>
                        <button type="submit" class="btn btn-primary m-1">Submit</button>
                        </EditForm>
                </div>
            </div>

        </div>
        <div class="col-sm-2"></div>
    </div>
</div>
@if (userIsCreated == true)
{
    <div class="modal show" style="display: block; backdrop-filter: blur(4px) " id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Your  user  account was created</h4>
                </div>
                <div class="modal=body">
                    <p>&nbsp;&nbsp;&nbsp;Username: @requestModel.Username</p>
                    <p>&nbsp;&nbsp;&nbsp;Email:  @requestModel.Email</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="Redirect">Go to login</button>
                </div>
            </div>

        </div>
    </div>
}

@code {

    private CreateOrUpdateUserRequestModel requestModel = new();
    private bool userIsCreated = false;
    private bool isPasswordWrong = false;
    string verificationPassword;
    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthState.GetAuthenticationStateAsync();

        if (authState.User.Identity is not null && authState.User.Identity.IsAuthenticated)
        {

            NavManager.NavigateTo("/");
        }
    }

    public void Redirect()
    {
        NavManager.NavigateTo("/Login");
    }

    public async Task HandleSubmitAsync()
    {
        if (requestModel.Password != verificationPassword)
        {
            isPasswordWrong = true;
            return;
        }
        isPasswordWrong = false;
    
        var response = await UserService.CreateAsync(requestModel);


        userIsCreated = true;



    }
}


