@page "/recipes/{recipeId}"

@inject NavigationManager NavigationManager
@inject IRecipeService RecipeService
@inject IIngredientService IngredientService
@inject IIngredientRecipeService IngredientRecipeService
@inject ICategoryRecipeService CategoryRecipeService
@inject ICategoryService CategoryService
@inject IPhotoService PhotoService

<PageTitle>Update Recipe</PageTitle>


<div class="row">
    <div class="col-md-2"></div>
    <div class="col-md-8">
        <EditForm Model="@recipe" OnValidSubmit="SaveAll">
            <DataAnnotationsValidator />
            <div class="container" style="margin-top: 100px">
                <div class="row">
                    <h2 style="text-align:center">Update Recipe</h2>
                </div>
                <div class="row">
                    <label for="title">Title: </label>
                    <InputText id="title" @bind-Value="@recipe.Title"></InputText>
                    <ValidationMessage For="@(()=> recipe.Title)"></ValidationMessage>

                </div>
                <div class="row">
                    <label for="recipeLink">RecipeLink: </label>
                    <InputText id="recipeLink" @bind-Value="@recipe.RecipeLink"></InputText>
                    <ValidationMessage For="@(()=> recipe.RecipeLink)"></ValidationMessage>
                </div>
                <div class="row">
                    <label for="description">Description: </label>
                    <InputText id="description" @bind-Value="@recipe.Description"></InputText>
                    <ValidationMessage For="@(()=> recipe.Description)"></ValidationMessage>
                </div>
                <div class="row">
                    <label for="cuisine">Cuisine: </label>
                    <InputText id="cuisine" @bind-Value="@recipe.Cuisine"></InputText>
                    <ValidationMessage For="@(()=> recipe.Cuisine)"></ValidationMessage>
                </div>
                <div class="row">
                    <label for="dificulty">Dificulty: </label>
                    <InputText id="dificulty" @bind-Value="@recipe.Dificulty"></InputText>
                    <ValidationMessage For="@(()=> recipe.Dificulty)"></ValidationMessage>
                </div>
            </div>

        </EditForm>
    </div>
    <div class="col-md-2"></div>
</div>


<div class="container mt-3">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Ingredient</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ingredientRecipe in ingredientRecipeList)
            {
                <tr>
                    <td>
                        <select id="recipeIngredients" class="form-select" @bind="ingredientRecipe.IngredientId">

                            @foreach (var ingredient in ingredientsList)
                            {@if (ingredient.Id == ingredientRecipe.IngredientId)
                                {
                                    <option value="@ingredient.Id" selected>@ingredient.Name</option>
                                }
                              else
                                {
                                    <option value="@ingredient.Id">@ingredient.Name</option>
                                }

                        }
                        </select>
                    </td>

                    <td>
                        <InputText class="form-control" id="quantity" @bind-Value="@ingredientRecipe.Quantity"></InputText>
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" @onclick="async () => { ingredientRecipeList.Remove(ingredientRecipe); }">Delete</button>
                    </td>
                </tr>
            }
            @foreach (var ingredientRecipe in temporaryIngredientRecipesList)
            {
                <tr>
                    <td>
                        <select id="SelectedIngredient" class="form-select" @bind="ingredientRecipe.IngredientId">
                            <option value="" selected disabled>Select ingredient</option>
                            @foreach (var ingredient in ingredientsList)
                            {
                                <option value="@ingredient.Id">@ingredient.Name</option>
                            }
                        </select>
                    </td>

                    <td>
                        <InputText class="form-control" id="quantity" @bind-Value="@ingredientRecipe.Quantity"></InputText>
                    </td>

                    <td>
                        <button type="button" class="btn btn-danger" @onclick="async () => { temporaryIngredientRecipesList.Remove(ingredientRecipe); }">Delete</button>
                    </td>
                    <td>
                    </td>


                </tr>
            }
        </tbody>
    </table>
</div>
<span class="btn btn-primary w-100 text-center" @onclick="AddIngredientRow">Add Ingredient</span>

<div class="container">
    <div class="row">
        <div class="col-sm-6">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Category</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var categoryRecipe in categoryRecipeList)
                    {
                        <tr>
                            <td>
                                <select class="form-select" @bind="categoryRecipe.CategoryId">
                                    @foreach (var category in categoryList)
                                    {@if (category.Id == categoryRecipe.CategoryId)
                                        {
                                            <option value="@category.Id" selected>@category.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                }
                                </select>
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger" @onclick="async () => { categoryRecipeList.Remove(categoryRecipe); }">Delete</button>
                            </td>
                        </tr>
                    }
                    @foreach (var categoryRecipe in temporaryCategoryRecipeList)
                    {
                        <tr>
                            <td>
                                <select class="form-select" @bind="categoryRecipe.CategoryId">
                                    <option value="" selected disabled>Select category</option>
                                    @foreach (var category in categoryList)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger" @onclick="async () => { temporaryCategoryRecipeList.Remove(categoryRecipe); }">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <span class="btn btn-primary w-100 text-center" @onclick="AddCategoryRecipeRow">Add Recipe Category </span>

        </div>
        <div class="col-sm-6">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Link</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var photo in photoRecipeList)
                    {
                        <tr>
                            <td>
                                <InputText class="form-control" id="link" @bind-Value="@photo.Link"></InputText>
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger" @onclick="async () => { photoRecipeList.Remove(photo); }">Delete</button>
                            </td>
                        </tr>
                    }
                    @foreach (var photo in photoList)
                    {

                        <tr>
                            <td>
                                <InputText class="form-control" id="link" @bind-Value="@photo.Link"></InputText>
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger" @onclick="async () => { photoList.Remove(photo); }">Delete</button>
                            </td>

                        </tr>


                    }
                </tbody>
            </table>
            <span class="btn btn-primary w-100 text-center" @onclick="AddPhotoRow">Add Recipe Photo </span>
        </div>
    </div>

    <button class="btn btn-primary w-100" style="margin-top:60px" data-bs-toggle="modal" data-bs-target="#myModal" @onclick="SaveAll">Save All</button>

</div>


@if (displayMessageAllCreated)
{
    <div class="modal show" style="display: block; backdrop-filter: blur(4px) " id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">The recipe was created</h4>
                </div>
                <div class="modal=body">
                    <div class="container">
                        <div class="row">
                            <div class="col-sm-6">
                                <p>Recipe id: @recipeId</p>
                                <p>Recipe title: @recipe.Title</p>
                                <p>Recipe link: @recipe.RecipeLink</p>
                                <p>Recipe description:@recipe.Description</p>
                                <p>Recipe cuisine: @recipe.Cuisine</p>
                                <p>Recipe dificulty: @recipe.Dificulty</p>
                            </div>
                            <div class="col-sm-6">
                                <p style="margin-top:5px">Ingredients:</p>
                                @foreach (var item in temporaryIngredientRecipesList)
                                {
                                    var ingredientId = int.Parse(item.IngredientId);
                                    var ingredientName = ingredientsList.First(x => x.Id == ingredientId).Name;
                                    <span>
                                        <span class="badge bg-secondary">  @ingredientName </span>
                                        @item.Quantity
                                    </span>
                                }
                                <p style="margin-top:5px">Categories:</p>
                                @foreach (var category in temporaryCategoryRecipeList)
                                {
                                    var categoryId = int.Parse(category.CategoryId);
                                    var categoryName = categoryList.First(x => x.Id == categoryId);
                                    <span>
                                        <span class="badge bg-secondary">  @categoryName.Name </span>
                                    </span>
                                }
                                <p style="margin-top:5px">Photos:</p>
                                @foreach (var photo in photoList)
                                {<span>
                                        <img style=" width:50px; height:50px" src="@photo.Link" />
                                    </span>
                                }
                            </div>
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="RefreshPage">Close</button>
                </div>
            </div>

        </div>
    </div>
}



@code {
    [Parameter]
    public string recipeId { get; set; }
    private CreateOrUpdateRecipeRequestModel recipe = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var recipeToUpdate = await RecipeService.GetByIdAsync(int.Parse(recipeId));
        recipe.Title = recipeToUpdate.Title;
        recipe.RecipeLink = recipeToUpdate.RecipeLink;
        recipe.Description = recipeToUpdate.Description;
        recipe.Cuisine = recipeToUpdate.Cuisine;
        recipe.Dificulty = recipeToUpdate.Dificulty;
        ingredientRecipeList = recipeToUpdate.IngredientRecipes;
        categoryRecipeList = recipeToUpdate.CategoryRecipes;
        photoRecipeList = recipeToUpdate.Photos;

        ingredientsList = await IngredientService.GetAsync(0,10000);
        categoryList = await CategoryService.GetAsync();


    }

    private List<IngredientResponseModel> ingredientsList = new();
    private List<CategoryResponseModel> categoryList = new();

    private List<IngredientRecipeResponseModel> ingredientRecipeList = new();
    private List<TemporaryIngredientRecipe> temporaryIngredientRecipesList = new();

    private List<CategoryRecipeResponseModel> categoryRecipeList = new();
    private List<TemporaryCategoryRecipe> temporaryCategoryRecipeList = new();


    private List<PhotoResponseModel> photoList = new();
    private List<PhotoResponseModel> photoRecipeList = new();

    private bool displayMessageAllCreated = false;

    public async Task AddIngredientRow()
    {
        var temporaryIngredientRecipe = new TemporaryIngredientRecipe();
        temporaryIngredientRecipesList.Add(temporaryIngredientRecipe);
        StateHasChanged();
    }

    public async Task AddCategoryRecipeRow()
    {
        var temporaryCategoryRecipe = new TemporaryCategoryRecipe();
        temporaryCategoryRecipeList.Add(temporaryCategoryRecipe);
        StateHasChanged();
    }

    public async Task AddPhotoRow()
    {
        PhotoResponseModel photo = new();
        photoList.Add(photo);
        StateHasChanged();
    }



    public async Task UpdateRecipe()
    {
        await RecipeService.UpdateAsync(int.Parse(recipeId), recipe);


    }

    public async Task CreateIngredientRecipe()
    {
        await IngredientRecipeService.DeleteByRecipeIdAsync(int.Parse(recipeId));
        foreach (var ingredientRecipe in ingredientRecipeList)
        {
            CreateIngredientRecipeRequestModel createIngredientRecipe = new()
            {
                IngredientId = ingredientRecipe.IngredientId,
                RecipeId = int.Parse(recipeId),
                Quantity = ingredientRecipe.Quantity,
            };
            await IngredientRecipeService.CreateAsync(createIngredientRecipe);

        }

        foreach (var ingredientRecipe in temporaryIngredientRecipesList)
        {
            CreateIngredientRecipeRequestModel createIngredientRecipe = new()
            {
                IngredientId = int.Parse(ingredientRecipe.IngredientId),
                RecipeId = int.Parse(recipeId),
                Quantity = ingredientRecipe.Quantity,
            };
            await IngredientRecipeService.CreateAsync(createIngredientRecipe);

        }
    }

    public async Task CreateCategoryRecipe()
    {
        await CategoryRecipeService.DeleteByRecipeIdAsync(int.Parse(recipeId));
        foreach(var categoryRecipe in categoryRecipeList)
        {
            CreateCategoryRecipeRequestModel createCategoryRecipe = new()
            {
                CategoryId = categoryRecipe.CategoryId,
                RecipeId = int.Parse(recipeId),
            };
            await CategoryRecipeService.CreateAsync(createCategoryRecipe);
        }

        foreach (var categoryRecipe in temporaryCategoryRecipeList)
        {
            CreateCategoryRecipeRequestModel createCategoryRecipe = new()
            {
                CategoryId = int.Parse(categoryRecipe.CategoryId),
                RecipeId = int.Parse(recipeId),
            };
            await CategoryRecipeService.CreateAsync(createCategoryRecipe);
        }
    }

    public async Task CreatePhoto()
    {
        await PhotoService.DeleteByRecipeIdAsync(int.Parse(recipeId));
        foreach(var photo in photoRecipeList)
        {
            CreatePhotoRequestModel createPhoto = new()
            {
                Link = photo.Link,
                RecipeId = int.Parse(recipeId),
            };
            await PhotoService.CreateAsync(createPhoto);
        }
        foreach (var photo in photoList)
        {
            CreatePhotoRequestModel createPhoto = new()
            {
                Link = photo.Link,
                RecipeId = int.Parse(recipeId),
            };
            await PhotoService.CreateAsync(createPhoto);
        }
    }



    public async Task SaveAll()
    {
        await UpdateRecipe();
        await CreateIngredientRecipe();
        await CreateCategoryRecipe();
        await CreatePhoto();
        displayMessageAllCreated = true;
    }

    private void RefreshPage()
    {
        NavigationManager.NavigateTo("/", true);
    }

    public class TemporaryIngredientRecipe
    {
        public int Id { get; set; }
        public string IngredientId { get; set; }
        public int RecipeId { get; set; }
        public string Quantity { get; set; }
    }

    public class TemporaryCategoryRecipe
    {
        public int Id { get; set; }
        public string CategoryId { get; set; }
        public int RecipeId { get; set; }
    }
}


