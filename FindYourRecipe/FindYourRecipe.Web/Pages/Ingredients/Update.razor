@page "/ingredients/{IngredientId}"
@inject IIngredientService IngredientService


<PageTitle>Update Ingredient</PageTitle>

<div class="row">
    <div class="col-md-2"></div>
    <div class="col-md-8">
        <EditForm Model="@ingredientToUpdate" OnValidSubmit="HandleValidSubmitAsync">
            <DataAnnotationsValidator />
            <div class="container" style="margin-top: 100px">
                <div class="row">
                    <h2 style="text-align:center">Update Ingredient</h2>
                </div>
                <div class="row">
                    <label for="name">Name: </label>
                    <InputText id="name" @bind-Value="@ingredientToUpdate.Name"></InputText>
                    <ValidationMessage For="@(()=> ingredientToUpdate.Name)"></ValidationMessage>

                </div>
                <div class="row">
                    <label for="category">Category: </label>
                    <InputText id="category" @bind-Value="@ingredientToUpdate.Category"></InputText>
                    <ValidationMessage For="@(()=> ingredientToUpdate.Category)"></ValidationMessage>
                </div>

                <div class="row" style="margin-top:20px">
                    <button type="submit" class="btn btn-primary">Update ingredient</button>
                </div>
            </div>

        </EditForm>
    </div>
    <div class="col-md-2"></div>
</div>

@if (displayMessage)
{
    <div style="text-align:center; margin-top:20px">
        <p style="font-size:25px">The ingredient was created</p>
        <p>Ingredient id: @newIngredient.Id</p>
        <p>Ingredient name: @newIngredient.Name</p>
        <p>Ingredient category: @newIngredient.Category</p>
    </div>
}


@code { protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var ingredient = await IngredientService.GetByIdAsync(int.Parse(IngredientId));
        ingredientToUpdate.Name = ingredient.Name;
        ingredientToUpdate.Category = ingredient.Category;
    }

    [Parameter]
    public string IngredientId { get; set; }

    private CreateOrUpdateIngredientRequestModel ingredientToUpdate = new();

    private IngredientResponseModel newIngredient = new();

    private bool displayMessage = false;

    public async Task HandleValidSubmitAsync()
    {
        newIngredient = await IngredientService.UpdateAsync(int.Parse(IngredientId),ingredientToUpdate);
        displayMessage = true;
        

    }
}

